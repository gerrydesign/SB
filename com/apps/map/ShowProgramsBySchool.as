package com.apps.map {	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.text.TextField;	import com.MediaDetails;	import com.LoadAssets;	import com.greensock.*;	import com.greensock.easing.*;	import com.greensock.loading.*;	import com.greensock.loading.display.*;	import com.greensock.events.LoaderEvent;		/**	 * ...	 * @author Gerry Yumul	 */	public class ShowProgramsBySchool extends Sprite 	{		private var _school:String;		private var _programList:XMLList		private var programHolder:Sprite = new Sprite;		private var programArrs:Array = new Array;		private var details:MediaDetails;		public static var _instance:ShowProgramsBySchool;		public static function get instance():ShowProgramsBySchool{ return _instance; }						public function ShowProgramsBySchool(programList:XMLList) 		{			_programList = programList.program;			_school = programList.attribute("name");			this.addChild(programHolder);			this.name = "showProgramBySchool";			init();			_instance = this;		}				private function init():void {			trace("School Name:::::::: from Show School" + _school)																																	var tl:TimelineLite = new TimelineLite;						for (var i:int = 0; i <_programList.length() ; i++) 			{				trace("program item" + _programList[i])				var pHolder:Sprite = new Sprite;				pHolder.name = _programList[i];				var programItem:TextField = LocationGrid.instance.createTextField(_programList[i], 11, "0x873348");				var pBg:Sprite = LocationGrid.instance.createSquareBg(programItem.width + 2, programItem.height + 1)				pBg.visible = false;				pBg.name = _programList[i] + "bg";				var pBtn:Sprite = LocationGrid.instance.createSquareBg(programItem.width + 2, programItem.height + 1)				pBtn.alpha = 0				pHolder.y = programHolder.height				programHolder.addChild(pHolder)				pHolder.addChild(pBg)				pHolder.addChild(programItem)				pHolder.addChild(pBtn)				pHolder.addEventListener(MouseEvent.CLICK, showProgramDetails)				pHolder.addEventListener(MouseEvent.MOUSE_OVER, showProgramDetailsOver)				pHolder.addEventListener(MouseEvent.MOUSE_OUT, showProgramDetailsOut)				pHolder.alpha = .4;				pHolder.visible = false;				pHolder.buttonMode = true;				tl.append(TweenLite.to(pHolder,.1,{visible:true}))			}											}				private function showProgramDetails(e:MouseEvent):void {			if(String(LoadAssets.instance.xmlDoc.coverflow.cover.sections.item.(@name == e.target.parent.name)) != "")			{			trace("program params ::: " + e.target.parent.name)			details.visible = true;			details.showDetails(false);			removeEvents();			}		}				private function showProgramDetailsOver(e:MouseEvent):void {			var t:Sprite = e.currentTarget as Sprite;			t.alpha = 1			t.getChildAt(0).visible = true;						if(String(LoadAssets.instance.xmlDoc.coverflow.cover.sections.item.(@name == e.target.parent.name)) != "")			{			trace("EXISTENT")			var filterXML:XMLList = LoadAssets.instance.xmlDoc.coverflow.cover.sections.item.(@name == e.target.parent.name);			trace("This is the filtered XML::::::: " + filterXML)			}						if (filterXML != null) {				details = new MediaDetails(filterXML)				details.name = "detailUI";				details.x = 100;				details.y = e.currentTarget.y;				details.visible = false;				this.addChild(details);				trace("EXISTENT")			}else {				trace("NONE EXISTENT")			}				trace("This is the program:::::___________________________________________________________________")				trace("This is the program:::::" + LoadAssets.instance.xmlDoc.apps.app.details.region.state.school.program)				trace("This is the program:::::___________________________________________________________________")								trace("This is the School:::::___________________________________________________________________")				trace("This is the School:::::" + LoadAssets.instance.xmlDoc.apps.app.details.region.state.school.attribute("name").(program = e.target.parent.name))				trace("This is the School:::::___________________________________________________________________")		}				private function showProgramDetailsOut(e:MouseEvent):void {			var t:Sprite = e.currentTarget as Sprite;			t.alpha = .4			t.getChildAt(0).visible = false;			if(String(LoadAssets.instance.xmlDoc.coverflow.cover.sections.item.(@name == e.target.parent.name)) != "")			{				this.removeChild(details);			}		}				private function removeEvents():void {				for (var i:int = 0; i < programHolder.numChildren ; i++) 				{					programHolder.getChildAt(i).removeEventListener(MouseEvent.CLICK, showProgramDetails);					programHolder.getChildAt(i).removeEventListener(MouseEvent.MOUSE_OVER, showProgramDetailsOver);					programHolder.getChildAt(i).removeEventListener(MouseEvent.MOUSE_OUT, showProgramDetailsOut);				}		}				public function addEvents():void {				for (var i:int = 0; i < programHolder.numChildren ; i++) 				{				programHolder.getChildAt(i).alpha = .4;				programHolder.getChildAt(i).addEventListener(MouseEvent.CLICK, showProgramDetails)				programHolder.getChildAt(i).addEventListener(MouseEvent.MOUSE_OVER, showProgramDetailsOver)				programHolder.getChildAt(i).addEventListener(MouseEvent.MOUSE_OUT, showProgramDetailsOut)				}		}					}}