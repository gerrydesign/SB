package com {	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.geom.Matrix;	import flash.text.TextField;    import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	import flash.text.AntiAliasType;	import flash.text.Font;	import flash.text.FontStyle;	import flash.display.*	import com.SimilarInterest;	import com.greensock.*;	import com.greensock.TweenLite;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.TypewriterPlugin;	import com.greensock.plugins.DecoderTextPlugin;	import com.greensock.*;	import com.greensock.easing.*;	import com.apps.map.ShowProgramsBySchool;	import com.apps.Tile;	import com.Facts; 	TweenPlugin.activate([TypewriterPlugin]);	TweenPlugin.activate([DecoderTextPlugin]); 		/**	 * ...	 * @author Gerry Yumul	 */	public class MediaDetails extends Sprite 	{		private var _xmlData:XMLList;		private var sectionName:String;		private var format1:TextFormat = new TextFormat;		private var format2:TextFormat = new TextFormat;		private var detailHolder:Sprite = new Sprite;		//private var zip_ui:Sprite = new enter_zip;		private var similar:SimilarInterest = new SimilarInterest;		private var myfont2 = new Font2;		public var sp:Sprite;		private var label:TextField;		public var _orient:String		private var close_btn:close_butt= new close_butt;		Font.registerFont(Font2);				public static var _instance:MediaDetails;		public static function get instance():MediaDetails { return _instance; }				public function MediaDetails(xmlData:XMLList) 		{			_instance = this;			_xmlData = xmlData;			init();		}				private function init():void {												this.addChild(detailHolder);			sectionName = _xmlData.attribute("name");			var secLabel:String = (_xmlData.attribute("name")).toUpperCase()			var secName:TextField = createTextField(secLabel, 12);			secName.x = 26;			secName.y = 10 ;						if (secName.width > 185) {				sp = createSquare(secName.width + 55, 54)//185			}else {				sp = createSquare(200, 54)			}			detailHolder.addChild(sp);			detailHolder.addChild(secName)						var tx:Sprite = createTexture();			tx.x = 10;			tx.y = 14;			detailHolder.addChild(tx);						var dList:Sprite = new Sprite;			dList.name = "listHolder"			detailHolder.addChild(dList);								for (var i:int = 0; i < _xmlData.children().length(); i++)  				{										var lbl:String = _xmlData.child(i).attribute("label");										if (lbl != "") {					var secHolder:Sprite = new Sprite;					dList.addChild(secHolder)					secHolder.y = dList.height;					secHolder.name = lbl;										label = createTextField(lbl, 11);										if (secName.width > 185)  var btn:Sprite = createSquareBg(secName.width + 17, 20) else var btn:Sprite = createSquareBg(sp.width - 33, 20)					var bullet:Sprite = new orange_bullet;										btn.x = 10;					btn.y = 42;					btn.alpha = 0;					var btnArea:Sprite = createSquareBg(btn.width, btn.height);					btnArea.x = btn.x					btnArea.y = btn.y					btnArea.alpha = 0					label.x = 16 + btn.x;					label.y = 2 + btn.y;					bullet.x = 6 + btn.x;					bullet.y = 6 + btn.y;					//bullet.alpha = 0;										secHolder.addChild(btn);					secHolder.addChild(label);					secHolder.addChild(bullet);					secHolder.addChild(btnArea);					secHolder.buttonMode = true;					secHolder.addEventListener(MouseEvent.CLICK, btnClick);					secHolder.addEventListener(MouseEvent.MOUSE_OVER, btnHover);					secHolder.addEventListener(MouseEvent.MOUSE_OUT, btnOut);				}					}						dList.visible = false;			dList.alpha = 0;						//zip_ui.y = detailHolder.height;			//zip_ui.visible = false;			//zip_ui.alpha = 0;			//this.addChild(zip_ui)			//this.setChildIndex(zip_ui, -0)						similar.visible = false;			similar.alpha = 0;															//similar.addEventListener(MouseEvent.CLICK,showSimilar)			//similar.y = zip_ui.height + zip_ui.y;			similar.getItems(_xmlData.similar_interest)			this.addChild(similar)			this.setChildIndex(similar, -0)					//	TweenLite.to(secName, 0.5, { typewriter:secLabel} );				//						}		////////////////////////MOUSE-EVENTS/////////////////////////////////////////				private function btnClick(e:MouseEvent):void {				trace("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")			var type:String = e.target.parent.name;			trace("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")			trace(_xmlData.testimonial.text());			trace("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::")						/*var cover:Sprite = createSquareCover(stage.stageWidth, stage.stageHeight,"0x000000");			cover.name = "coverDetail"			Main.instance.addChild(cover);*/						//var t:Tile = new Tile();						var t:Tile = new Tile("images/pattern.png",stage.stageWidth, stage.stageHeight);			t.name = "coverDetail"     		Main.instance.addChild(t);									switch(type){				case "TESTIMONIALS":				var test:Testimonials = new Testimonials(_xmlData.testimonial.text())				test.name = "media";				Main.instance.addChild(test);				break;								case "FACTS":				var facts:Facts = new Facts(_xmlData.facts)				facts.name = "media"				Main.instance.addChild(facts);/**/				break;								case "PLAY GAMES":				trace("_xmlData.facts.text()   ::: " + _xmlData.facts)				var game:Games = new Games(_xmlData.game.text())				game.name = "media";				Main.instance.addChild(game);				break;											}											}				private function btnHover(e:MouseEvent):void {			var s:Sprite = e.currentTarget as Sprite;			s.getChildAt(0).alpha = 1;			//s.getChildAt(2).alpha = 1;			TweenLite.to(s.getChildAt(2), 0, {tint:0xFF6600});		}				private function btnOut(e:MouseEvent):void {			var s:Sprite = e.currentTarget as Sprite;			s.getChildAt(0).alpha = 0;			//s.getChildAt(2).alpha = 0;			TweenLite.to(s.getChildAt(2), 0, {tint:null});		}				private function showSimilar(e:MouseEvent):void {						similar.showItems();		}		//////////////////////PUBLIC FUNCTION TO SHOW DETAILS////////////////////				public function showDetails(block:Boolean = true):void {			if(block) blockUnfocused()			this.addChild(close_btn)			close_btn.x = sp.width - 25			close_btn.y = -14						close_btn.alpha = 0			close_btn.scaleX = .3;			close_btn.scaleY = .3;			close_btn.buttonMode = true;			close_btn.addEventListener(MouseEvent.CLICK,closeDetails)									/*var xVal:int;			if (_orient == "left") {				similar.scaleX = -1;				similar.x = similar.width;				xVal = sp.width+200			}else {				xVal = 0 - (similar.width - 5)			}*/			trace("_orient::::::::: " + _orient)			var dList:Sprite = detailHolder.getChildByName("listHolder") as Sprite;			dList.visible = true;			//zip_ui.visible = true;			similar.visible = true;						var tl:TimelineLite = new TimelineLite({onComplete:showList});			tl.append(TweenLite.to(sp, .25,{height: 130, y:12}))			tl.append(TweenLite.to(dList, .25, { alpha: 1 } ))			//tl.append(TweenLite.to(zip_ui, .25, {alpha: 1, y: sp.height + sp.x + 70  } ))			//tl.append(TweenLite.to(similar, .25, {alpha: 1, x: xVal} ))			//tl.append(TweenLite.to(similar, .25, { alpha: 1, y: sp.height + sp.x + 117 } ))			tl.append(TweenLite.to(similar, .25, { alpha: 1, y: sp.height + 80 } ))		}						private function showList():void {			similar.showItems();		}				public function showCloseButton():void {			TweenLite.to(close_btn, .25, {alpha: 1, scaleX: 1, scaleY: 1, ease:Bounce.easeOut} )		}								//////////////////////FUNCTION TO CREATE DISPLAY OBJECTS////////////////////		private function createTextField(t:String, s:int):TextField		{			//trace("This is trace create text" + t)						format1.size = s;			format1.letterSpacing = .5;			format1.font = myfont2.fontName;			format1.align = TextFormatAlign.CENTER;			format1.color = 0x000000;						format2.size = s;			format2.letterSpacing = .5;			format2.font = myfont2.fontName;			format2.align = TextFormatAlign.CENTER;			format2.color = 0x666666;												var tf:TextField = new TextField;			tf.text = t;			if(s == 11) tf.setTextFormat(format2) else tf.setTextFormat(format1) ;			//tf.border = true;			tf.embedFonts = true;			tf.antiAliasType = AntiAliasType.ADVANCED;			tf.condenseWhite = true;			//tf.wordWrap = true;			//tf.multiline = true;			tf.autoSize = TextFieldAutoSize.LEFT;							return tf;		}				private function createSquare(w:int, h:int):Sprite		{			var square:Sprite = new detail_ui;				//square.x = -8				//square.y = -8			square.width = w;			square.height = h;			return square;		}				private function createSquareBg(w:int, h:int, c:String = "0xFFFFFF"):Sprite		{			var square:Sprite = new Sprite;			square.graphics.beginFill(Number(c));			square.graphics.drawRoundRect(0,0,w,h,10);			square.graphics.endFill();/**/						return square;		}				private function createSquareCover(w:int, h:int, c:String = "0xFFFFFF"):Sprite		{			var square:Sprite = new Sprite;			square.graphics.beginFill(Number(c));			square.graphics.drawRect(0,0,w,h);			square.graphics.endFill();/**/						return square;		}									private function createTexture():Sprite {			var tg:Sprite = new texturegrabber;			return tg					}						public function blockUnfocused():void {				Scenes.instance.detailsActive()			}				public function closeDetails(e:MouseEvent):void {						trace("target parent::::    " + e.target.parent)			trace("target parent name::::    " + e.target.parent.parent.parent.name)						if(this.parent.name !="showProgramBySchool"){						var parentItem:Sprite = e.target.parent.parent.parent.name as Sprite			if (e.target.parent.parent.parent.name != "plist") {				Scenes.instance.sceneDefault();			}else {				this.parent.removeChild(this)				ShowProgramsBySchool.instance.addEvents()			}			}else{								ShowProgramsBySchool.instance.addEvents();				this.parent.removeChild(this);			}		}			}}