package com{	import com.greensock.loading.data.MP3LoaderVars;	import com.greensock.motionPaths.CirclePath2D;	import flash.display.MovieClip;	import flash.display.Sprite;	import com.greensock.easing.*;	import com.greensock.loading.*;	import com.greensock.loading.display.*;	import com.greensock.events.LoaderEvent;	import flash.events.MouseEvent;	import flash.system.LoaderContext;	import flash.text.TextField;	import com.Scenes;	import com.greensock.*;	import com.IntroVideoPayer;	import flash.text.StyleSheet;		import flash.system.fscommand;				/**	 * ...	 * @author Gerry Yumul	 */	public class LoadAssets extends Sprite 	{		public var xmlDoc:XML;		public var myCSS:StyleSheet = new StyleSheet;		public var bg:Sprite = new Sprite;		public var logo:Sprite = new Sprite;		private var bgLoc:String;		private var logoLoc:String;		public var apps:Application = new Application;		public var appsCont:Sprite = new Sprite;		private var sceneCont:Sprite = new Sprite;		private var introVidHolder:Sprite = new Sprite;		private var videoHolder:Sprite = new Sprite;		private var preHolder:Sprite = new Sprite;		public var introVid:IntroVideoPayer;		public static var _instance:LoadAssets;		public static function get instance():LoadAssets { return _instance; }				//private var sceneContainer:Sprite = new Sprite;		public var sceneClass:Scenes;		private var introVideo:VideoLoader;		private var loopSound:MP3Loader;		private var uiControl:MovieClip;										public function LoadAssets() 		{			init();			_instance = this;			this.name = "LoadAssets"		}				private function init():void {			var xml:XMLLoader = new XMLLoader("xml/config.xml", { name:"xmlDoc", onComplete:completeXMLHandler } );			xml.load();						this.addChild(bg);			//bg.x = 0;			//bg.y = 0;			this.addChild(logo);						this.addChild(appsCont);									this.addChild(sceneCont);						this.addChild(preHolder);			//this.addChild(introVidHolder);						//sceneContainer.y = 100;			//this.addChild(videoHolder);		}				private function completeXMLHandler(e:LoaderEvent):void {												xmlDoc = e.target.content;				var appList:XMLList = xmlDoc.apps.app;			var sceneBGxml:XMLList = xmlDoc.coverflow.cover;			introVideo = new VideoLoader(xmlDoc.intro_video, {name:"introVideo", container:introVidHolder, visible:false, x: xmlDoc.intro_video.attribute("xloc"), y: xmlDoc.intro_video.attribute("yloc"),/*width:400, height:300, */scaleMode:"proportionalInside", bgColor:0x000000, autoPlay:false, volume:1, requireWithRoot:this.root, estimatedBytes:75000})			var queue:LoaderMax = new LoaderMax( { name:"mainQueue", onProgress: mainProgress, onComplete:completeHandler } );										for (var i:int = 0; i < appList.length() ; i++) 					{						queue.append(new ImageLoader(appList[i].img, { name:appList[i].id, container:appsCont, alpha: 0, visible:false } ));						//trace("SCENE++++++++++++++++++" )					}																								for (var j:int = 0; j < sceneBGxml.length() ; j++) 					{												var sceneHolder:Sprite = new Sprite;						sceneHolder.name = sceneBGxml[j].attribute("title");						this.sceneCont.addChild(sceneHolder) 						sceneHolder.visible = false;						sceneHolder.alpha = 0;                 												queue.append(new ImageLoader(sceneBGxml[j].attribute("img_ui"), { name:sceneBGxml[j].attribute("title"), container:sceneHolder } ));						queue.append(new VideoLoader(sceneBGxml[j].attribute("intro_video"), { name:sceneBGxml[j].attribute("title"), container:introVidHolder, visible:false, x:sceneBGxml[j].attribute("intro_vid_x"), y:sceneBGxml[j].attribute("intro_vid_y"),/*width:400, height:300, */scaleMode:"proportionalInside", bgColor:0x000000, autoPlay:false, volume:1, requireWithRoot:this.root, estimatedBytes:75000 } ));															var sectionItem:XMLList = sceneBGxml[j].sections.item;																		for (var k:int = 0; k < sectionItem.length(); k++) 						{							var sectionHolder = new Sprite;							sectionHolder.name = sectionItem[k].attribute("name");							sectionHolder.x = sectionItem[k].attribute("xloc");							sectionHolder.y = sectionItem[k].attribute("yloc");							sectionHolder.alpha = 0;							sectionHolder.visible = false;							sceneHolder.addChild(sectionHolder)							queue.append(new ImageLoader(sectionItem[k].attribute("img"), { name:sectionItem[k].attribute("name"), container:sectionHolder} ));						}					}									queue.append(introVideo);					queue.append(new ImageLoader(xmlDoc.background, { name:"background", container:bg,  tint:0xe1e7de} ));				queue.append(new ImageLoader(xmlDoc.logo, { name:"logo", container:logo } ));								loopSound = new MP3Loader(xmlDoc.audioLoop, { name:"audioLoop", autoPlay:false, repeat:1000, volume: 0, estimatedBytes:10100 } );				queue.append(loopSound);																//queue.append(new CSSLoader("css/style.css",{name:"myCSS", requireWithRoot:this.root}))								/*queue.append(new ImageLoader(xmlDoc.app.whysanford, { name:"why", container:this } ));				queue.append(new ImageLoader(xmlDoc.app.findlocation, { name:"where", container:this } ));				queue.append(new ImageLoader(xmlDoc.app.findprogram, { name:"what", container:this } ));*/								/**/							queue.load();		}								private function mainProgress(e:LoaderEvent):void {			Main.instance.preload_mc.progress.text = "LOADING " + Math.round(e.target.progress * 100) + "%";			Main.instance.preload_mc.masker.scaleY = e.target.progress;		}						private function completeHandler(e:LoaderEvent):void {									myCSS.styleSheet = LoaderMax.getContent("myCSS");			trace(appsCont.getChildAt(0))			apps.y = 580;			//apps.visible = false;			this.addChild(apps);			apps.visible = false;			apps.alpha = 0;						var arrs:Array = new Array;			trace(appsCont.numChildren);			for (var i:int = 0; i < appsCont.numChildren; i++) 			{				arrs.push(appsCont.getChildAt(i));				trace("trace I" + i)						}						apps.loadArrs(arrs, xmlDoc.apps);						sceneClass = new Scenes(sceneCont);						this.addChild(sceneClass);				recenterBackground();			trace("::::::::::::::::::::::::::::::::::::::::::::;LOADER MAX PRELOAD:::::::::::::::::::::::::::::::::::");					/*	var albumCovers:Sprite = Main.instance.cfHolder			albumCovers.visible = true;			TweenLite.to(albumCovers,.5,{alpha: 1, onComplete:introVidPlayer, onCompleteParams:["introVideo"]});*/												introVid = new IntroVideoPayer();			this.addChild(introVid);			introVid.loadVideo(introVidHolder)			introVid.y = 200;			//introVideoFunction();			introVidPlayer("introVideo");						var mc:MovieClip = Main.instance.preload_mc;			TweenLite.to(mc, .5, { alpha: 0, visible:false } )			Main.instance.esc.visible = true;						loopSound.playSound();			TweenLite.to(loopSound, 9, { volume: .3});												trace("THIS ISI SIISII IS ISI  8/1/2011")			uiControl = new mainButtons;						addChild(uiControl);			uiControl.x = stage.stageWidth - (uiControl.width-1);			uiControl.y = stage.stageHeight;						uiControl.close_btn.addEventListener(MouseEvent.CLICK, closeApps)				uiControl.close_btn.buttonMode = true;						uiControl.music_btn.addEventListener(MouseEvent.CLICK, stopMusic)				uiControl.music_btn.buttonMode = true;		}				private function closeApps(e:MouseEvent):void {			fscommand("quit");		}				private function stopMusic(e:MouseEvent):void {						/*if (loopSound.playSound) {				loopSound.soundPaused			}*/						loopSound.soundPaused = !loopSound.soundPaused;															if (loopSound.soundPaused) {				uiControl.music_btn.gotoAndStop(2);			}else {				uiControl.music_btn.gotoAndStop(1);			}		}				public function introVidPlayer(v:String) {			introVid.showIntroVid(v);		}				public function demoteCover():void {				var ind:int = this.getChildIndex(introVid);		this.setChildIndex(this.getChildByName("cover"),ind)			}				public function recenterBackground():void {			bg.x = stage.stageWidth / 2 - bg.width / 2;			logo.x = stage.stageWidth / 2 - logo.width / 2;				apps.x = stage.stageWidth / 2 - apps.width / 2;												introVidHolder.x = stage.stageWidth / 2 - introVidHolder.width / 2;			if (sceneClass) {				sceneClass.x = stage.stageWidth / 2 - sceneClass.width / 2; 				//sceneClass.reCenter();						}						if (uiControl) {				uiControl.x = stage.stageWidth - (uiControl.width -1);				uiControl.y = stage.stageHeight;			}			}				public function introVideoFunction():void {		//IntroVideo Location///			//introVidHolder.x = 160;			//introVidHolder.y = 200;			//Main.instance.cfHolder.addChild(introVidHolder);			//introVideo.playVideo();			//introVideo.addEventListener(VideoLoader.VIDEO_COMPLETE, hideIntroVideo)			//this.setChildIndex(introVid,numChildren - 1);		}				private function hideIntroVideo(e:LoaderEvent):void {			TweenLite.to(introVidHolder, .25, {alpha:0, visible:false})		}/**/												}}