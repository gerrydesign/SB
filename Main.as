package {	import com.greensock.loading.*;	import com.greensock.loading.display.*;	import com.greensock.events.LoaderEvent;	import flash.display.*;	import flash.events.*;	import com.coverflow.*;	import com.greensock.*;	import com.LoadAssets;	import flash.system.fscommand;	import flash.geom.Point;	import flash.geom.PerspectiveProjection;	public class Main extends Sprite	{		public var Assets:LoadAssets;		public var coverflow:Coverflow;		public var cfHolder:Sprite = new Sprite  ;		private var baseCenterX:Number = 1024;		private var centerWidth:Number = 732;		public var w:int;		public var h:int;		public static var _instance:Main;		public var esc:Sprite = new exit;							private var preloader:Sprite = new preload_logo;		public var preload_mc:MovieClip;		public static function get instance():Main		{			return _instance;		}		public function Main()		{			setupStage();			_instance = this;			stage.addEventListener(Event.RESIZE, resizeHandler);			init();		}		public function setupStage():void		{			stage.quality = StageQuality.HIGH;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stage.displayState = StageDisplayState.FULL_SCREEN;		}		private function resizeHandler(event:Event):void		{			resizeMe();		}		private function resizeMe():void		{			Assets.recenterBackground();			cfHolder.x = stage.stageWidth / 2 - baseCenterX / 2;			root.transform.perspectiveProjection.projectionCenter = new Point(stage.stageWidth / 2,250);			trace("resize");			if (this.getChildByName("whysanford"))			{				this.getChildByName("whysanford").x = stage.stageWidth / 2 - this.getChildByName("whysanford").width / 2;				this.getChildByName("cover").x = stage.stageWidth / 2 - this.getChildByName("cover").width / 2;			}			else			{				trace("win is off");			}			if (this.getChildByName("cover"))			{				this.getChildByName("cover").width = stage.stageWidth;				this.getChildByName("cover").height = stage.stageHeight;				this.getChildByName("cover").x = stage.stageWidth / 2 - this.getChildByName("cover").width / 2;				this.getChildByName("cover").y = stage.stageHeight / 2 - this.getChildByName("cover").height / 2;			}			if (this.getChildByName("coverDetail"))			{				this.getChildByName("coverDetail").width = stage.stageWidth;				this.getChildByName("coverDetail").height = stage.stageHeight;				this.getChildByName("coverDetail").x = stage.stageWidth / 2 - this.getChildByName("coverDetail").width / 2;				this.getChildByName("coverDetail").y = stage.stageHeight / 2 - this.getChildByName("coverDetail").height / 2;				var m:Sprite = Sprite(this.getChildByName("media"));				m.getChildAt(0).x = stage.stageWidth / 2 - m.getChildAt(0).width / 2;				m.getChildAt(0).y = stage.stageHeight / 2 - m.getChildAt(0).height / 2;			}		}		private function init():void		{			var preLoader:SelfLoader = new SelfLoader(this, { name:"self", onProgress:progressHandler, onComplete:completeHandler } );						Assets = new LoadAssets();			Assets.addChild(cfHolder);			addChild(Assets);			coverflow = new Coverflow(1024,stage.stageHeight,stage);			TweenLite.to(this, 1, {delay:.2, onComplete:bufferStart});			cfHolder.addChild(coverflow);			cfHolder.visible = false;			cfHolder.alpha = 0;						//TEMP Var			w = stage.stageWidth;			h = stage.stageHeight;						preLoader.load();		}						private function completeHandler(e:LoaderEvent):void {			preload_mc = pl_logo;			preload_mc.x = stage.stageWidth / 2 - preload_mc.width / 2;			preload_mc.y = stage.stageHeight / 2 - preload_mc.height/ 2;						preload_mc.masker.scaleY = .1;			TweenLite.to(preload_mc, .5, { alpha:1 } )			}				private function bufferStart():void		{			resizeMe();			//cfHolder.visible = true;			Assets.apps.visible = true;		}				public function closeApp(event:MouseEvent):void		{		fscommand("quit");		}	}}